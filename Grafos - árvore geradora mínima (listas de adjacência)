#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

typedef struct Cell Cell;
typedef struct Lista Lista;
typedef struct GrafoLA GrafoLA;

struct Cell {
    int key;
    int peso_aresta;
    struct Cell* next;
};

struct Lista {
    Cell* head;
};

struct GrafoLA {
    int V;
    int A;
    Lista** adj;
};

Lista* criar_lista() {
    Lista* l = (Lista*)malloc(sizeof(Lista));
    l->head = NULL;
    return l;
}

Cell* criar_celula(int key, int peso) {
    Cell* c = (Cell*)malloc(sizeof(Cell));
    c->key = key;
    c->peso_aresta = peso;
    c->next = NULL;
    return c;
}

int lista_vazia(Lista* l) {
    return (l == NULL) || (l->head == NULL);
}

int procurar(int key, Lista* l) {
    Cell* aux;
    if (l != NULL) {
        aux = l->head;
        while ((aux != NULL) && (key < aux->key))
            aux = aux->next;
    }

    if ((aux != NULL) && (key == aux->key))
        return 1;
    else
        return 0;
}

void inserir_na_lista(int key, int peso, Lista* l) {
    Cell* auxA, *auxP;
    Cell* c = criar_celula(key, peso);

    if (lista_vazia(l)) {
        if (l == NULL)
            l = criar_lista();

        l->head = c;
    } else {
        if (l->head->key >= key) {
            c->next = l->head;
            l->head = c;
        } else {
            auxA = l->head;
            auxP = auxA;

            while ((auxP != NULL) && (auxP->key < key)) {
                auxA = auxP;
                auxP = auxP->next;
            }

            auxA->next = c;
            c->next = auxP;
        }
    }
}

int remover_na_lista(int key, Lista* l) {
    Cell* auxA, *auxP;

    if (!lista_vazia(l)) {
        auxA = l->head;

        if (auxA->key == key)
            l->head = l->head->next;
        else {
            auxP = auxA;

            while ((auxA != NULL) && (key < auxA->key)) {
                auxP = auxA;
                auxA = auxA->next;
            }

            if (auxA->key == key)
                auxP->next = auxA->next;
            else
                auxA = NULL;
        }

        if (auxA != NULL)
            free(auxA);

        return 1;
    }

    return 0;
}

void imprimir(Lista* l) {
    Cell* aux;

    if (!lista_vazia(l)) {
        aux = l->head;

        while (aux != NULL) {
            printf("(%d, %d)\n", aux->key, aux->peso_aresta);

            aux = aux->next;
        }
    }
}

int liberar_lista(Lista* l) {
    Cell* aux;

    if ((l != NULL) && !lista_vazia(l)) {
        while (l->head != NULL) {
            aux = l->head;
            l->head = aux->next;
            free(aux);
        }

        free(l);

        return 1;
    }

    return 0;
}

static Lista** iniciar_LA(int n) {
    int i;
    Lista** adj = (Lista**)malloc(n * sizeof(Lista*));

    for (i = 0; i < n; i++)
        adj[i] = criar_lista();

    return adj;
}

GrafoLA* iniciar_grafoLA(int v) {
    GrafoLA* G = (GrafoLA*)malloc(sizeof(GrafoLA));
    G->V = v;
    G->A = 0;
    G->adj = iniciar_LA(G->V);

    return G;
}

int aresta_existeLA(GrafoLA* G, int v1, int v2) {
    if ((G != NULL) && (G->adj[v1]->head != NULL))
        return procurar(v2, G->adj[v1]);

    return 0;
}

void inserir_arestaLA(GrafoLA* G, int v1, int v2, int peso) {
    if (!aresta_existeLA(G, v1, v2)) {
        inserir_na_lista(v2, peso, G->adj[v1]);
        inserir_na_lista(v1, peso, G->adj[v2]);
        G->A++;
    }
}

void imprimir_arestasLA(GrafoLA* G) {
    int i;
    Cell* aux;

    if (G != NULL)
        for (i = 0; i < G->V; i++) {
            aux = G->adj[i]->head;

            while (aux != NULL) {
                printf("(%d, %d)\n", i, aux->key);

                aux = aux->next;
            }
        }
}

void liberarGLA(GrafoLA* G) {
    int i;

    if (G != NULL) {
        for (i = 0; i < G->V; i++)
            liberar_lista(G->adj[i]);

        free(G);
    }
}

void prim(GrafoLA* G)
{
    int i, pai[G->V], chave[G->V], minima[G->V], tam = G->V;
   
    for (i = 0; i < tam; i++)
    {
        pai[i] = -1;
        chave[i] = INT_MAX;
        minima[i] = 0;
    }
      
    pai[0] = -1;
    chave[0] = 0;
    
    for (i = 0; i < tam -1; i++)
    {
        int j, u, min = INT_MAX;
        
        for (j = 0; j < tam; j++)
        {
            if (minima[j] == 0 && chave[j] < min)
            {
                min = chave[j];
                u = j;
            }
        }

        minima[u] = 1;

        Cell* aux = G->adj[u]->head;
    
        while (aux != NULL)
        {
            int v = aux->key;
            int peso = aux->peso_aresta;

            if (minima[v] == 0 && peso < chave[v]) {
                pai[v] = u;
                chave[v] = peso;
            }

            aux = aux->next;
        }
    }

    printf("0: -\n");
    for (int i = 1; i < tam; i++)
    {
        printf("%d: %d\n", i, pai[i]);
    }
}

int main(void) 
{
    int i, tam, arestas;
    scanf("%d", &tam);

    GrafoLA* G = iniciar_grafoLA(tam);

    scanf("%d", &arestas);
    
    int a_1, a_2, peso;

    for (int i = 0; i < arestas; i++)
    {
        
        scanf("%d %d %d", &a_1, &a_2, &peso);
        inserir_arestaLA(G, a_1, a_2, peso);
    }

    prim(G);

}
